{"version":3,"sources":["services/ApiClient.js","components/ChallengeComponent.js","App.js","serviceWorker.js","index.js"],"names":["ApiClient","fetch","SERVER_URL","GET_CHALLENGE","user","a","b","guess","POST_RESULT","method","headers","body","JSON","stringify","userAlias","factorA","factorB","ChallengeComponent","props","state","message","handleSubmitResult","bind","handleChange","challenge","then","res","ok","json","setState","updateMessage","event","name","target","this","value","preventDefault","sendGuess","correct","resultAttempt","m","onSubmit","type","maxLength","onChange","min","React","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"8QAAMA,E,yGAOE,OAAOC,MAAMD,EAAUE,WAAaF,EAAUG,iB,gCAGjCC,EACAC,EACAC,EACAC,GACb,OAAON,MAAMD,EAAUE,WAAaF,EAAUQ,YAC1C,CACIC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UACP,CACIC,UAAWV,EACXW,QAASV,EACTW,QAASV,EACTC,MAAOA,U,KAzBzBP,EAEKE,WAAa,wBAFlBF,EAGKG,cAAgB,qBAHrBH,EAIKQ,YAAc,YA4BVR,QCsEAiB,E,kDAjGX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTd,EAAG,GAAIC,EAAG,GACVF,KAAM,GACNgB,QAAS,GACTb,MAAO,GAEX,EAAKc,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATL,E,gEAYQ,IAAD,OACtBtB,EAAUwB,YAAYC,MAClB,SAAAC,GACQA,EAAIC,GACJD,EAAIE,OAAOH,MAAK,SAAAG,GACZ,EAAKC,SAAS,CACVxB,EAAGuB,EAAKb,QACRT,EAAGsB,EAAKZ,aAIhB,EAAKc,cAAc,+B,mCAMtBC,GACT,IAAMC,EAAOD,EAAME,OAAOD,KAC1BE,KAAKL,SAAL,eACKG,EAAOD,EAAME,OAAOE,U,yCAIVJ,GAAQ,IAAD,OACtBA,EAAMK,iBACNpC,EAAUqC,UAAUH,KAAKf,MAAMf,KAC3B8B,KAAKf,MAAMd,EAAG6B,KAAKf,MAAMb,EACzB4B,KAAKf,MAAMZ,OACVkB,MAAK,SAAAC,GACEA,EAAIC,GACJD,EAAIE,OAAOH,MAAK,SAAAG,GACRA,EAAKU,QACL,EAAKR,cAAc,0CAEnB,EAAKA,cAAc,oBAAsBF,EAAKW,cAC9C,mCAIT,EAAKT,cAAc,6C,oCAKpBU,GACVN,KAAKL,SAAS,CACZT,QAASoB,M,+BAKX,OACI,2BACI,2BACI,mDACA,0BACKN,KAAKf,MAAMd,EADhB,MACsB6B,KAAKf,MAAMb,IAGrC,wBAAMmC,SAAUP,KAAKb,oBACjB,2CAEI,yBAAOqB,KAAK,OAAOC,UAAU,KACtBX,KAAK,OACLG,MAAOD,KAAKf,MAAMf,KAClBwC,SAAUV,KAAKX,gBAE1B,2BACA,2CAEI,yBAAOmB,KAAK,SAASG,IAAI,IAClBb,KAAK,QACLG,MAAOD,KAAKf,MAAMZ,MAClBqC,SAAUV,KAAKX,gBAE1B,2BACA,yBAAOmB,KAAK,SAASP,MAAM,YAE/B,0BAAKD,KAAKf,MAAMC,c,GA7FC0B,aCWlBC,MAVf,WACI,OACI,yBAAKC,UAAU,OACX,4BAAQA,UAAU,cACd,kBAAC,EAAD,SCIIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM7C,a","file":"static/js/main.29b05c46.chunk.js","sourcesContent":["class ApiClient {\n\n    static SERVER_URL = 'http://localhost:8080';\n    static GET_CHALLENGE = '/challenges/random';\n    static POST_RESULT = '/attempts';\n\n    static challenge(): Promise<Response> {\n        return fetch(ApiClient.SERVER_URL + ApiClient.GET_CHALLENGE);\n    }\n\n    static sendGuess(user: string,\n                     a: number,\n                     b: number,\n                     guess: number): Promise<Response> {\n        return fetch(ApiClient.SERVER_URL + ApiClient.POST_RESULT,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(\n                    {\n                        userAlias: user,\n                        factorA: a,\n                        factorB: b,\n                        guess: guess\n                    }\n                )\n            });\n    }\n}\n\nexport default ApiClient;\n","import * as React from \"react\";\nimport ApiClient from \"../services/ApiClient\";\n\nclass ChallengeComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            a: '', b: '',\n            user: '',\n            message: '',\n            guess: 0\n        };\n        this.handleSubmitResult = this.handleSubmitResult.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount(): void {\n        ApiClient.challenge().then(\n            res => {\n                if (res.ok) {\n                    res.json().then(json => {\n                        this.setState({\n                            a: json.factorA,\n                            b: json.factorB\n                        });\n                    });\n                } else {\n                    this.updateMessage(\"Can't reach the server\");\n                }\n            }\n        );\n    }\n\n    handleChange(event) {\n        const name = event.target.name;\n        this.setState({\n            [name]: event.target.value\n        });\n    }\n\n    handleSubmitResult(event) {\n        event.preventDefault();\n        ApiClient.sendGuess(this.state.user,\n            this.state.a, this.state.b,\n            this.state.guess)\n            .then(res => {\n                if (res.ok) {\n                    res.json().then(json => {\n                        if (json.correct) {\n                            this.updateMessage(\"Congratulations! Your guess is correct\");\n                        } else {\n                            this.updateMessage(\"Oops! Your guess \" + json.resultAttempt +\n                            \" is wrong, but keep playing!\");\n                        }\n                    });\n                } else {\n                   this.updateMessage(\"Error: server error or not available\");\n                }\n            });\n    }\n\n    updateMessage(m: string) {\n        this.setState({\n          message: m\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <h3>Your new challenge is</h3>\n                    <h1>\n                        {this.state.a} x {this.state.b}\n                    </h1>\n                </div>\n                <form onSubmit={this.handleSubmitResult}>\n                    <label>\n                        Your alias:\n                        <input type=\"text\" maxLength=\"12\"\n                               name=\"user\"\n                               value={this.state.user}\n                               onChange={this.handleChange}/>\n                    </label>\n                    <br/>\n                    <label>\n                        Your guess:\n                        <input type=\"number\" min=\"0\"\n                               name=\"guess\"\n                               value={this.state.guess}\n                               onChange={this.handleChange}/>\n                    </label>\n                    <br/>\n                    <input type=\"submit\" value=\"Submit\"/>\n                </form>\n                <h4>{this.state.message}</h4>\n            </div>\n        );\n    }\n}\n\nexport default ChallengeComponent;","import React from 'react';\nimport './App.css';\nimport ChallengeComponent from './components/ChallengeComponent';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <ChallengeComponent />\n            </header>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}